import{disconnect as d,getAccount as C,watchAccount as u,connect as h,InjectedConnector as w}from"@wagmi/core";import{CoinbaseWalletConnector as g}from"@wagmi/core/connectors/coinbaseWallet";import{WalletConnectConnector as m}from"@wagmi/core/connectors/walletConnect";import{jsonRpcProvider as p}from"@wagmi/core/providers/jsonRpc";class A{constructor(n,e){if(this.wagmi={},this.chains=[],this.disconnect=d,this.getAccount=C,this.watchAccount=u,!n.connectors.find(t=>t.id==="walletConnect"))throw new Error("WalletConnectConnector is required");this.wagmi=n,this.chains=e}getDefaultConnectorChainId(n){return n.chains[0].id}getConnectorById(n){const e=this.wagmi.connectors.find(t=>t.id===n);if(!e)throw new Error(`Connector for id ${n} was not found`);return e}async getActiveWalletConnectUri(){return(await this.getConnectorById("walletConnect").getProvider()).connector.uri}getConnectorWallets(){return this.wagmi.connectors.filter(n=>n.id!=="walletConnect")}async connectWalletConnect(n,e){const t=this.getConnectorById("walletConnect"),o=e??this.getDefaultConnectorChainId(t);async function r(){return new Promise(s=>{t.once("message",async({type:a})=>{if(a==="connecting"){const l=await t.getProvider();n(l.connector.uri),s()}})})}const[i]=await Promise.all([h({connector:t,chainId:o}),r()]);return i}async connectCoinbaseMobile(n,e){const t=this.getConnectorById("coinbaseWallet"),o=e??this.getDefaultConnectorChainId(t);async function r(){return new Promise(s=>{t.once("message",async({type:a})=>{if(a==="connecting"){const l=await t.getProvider();n?.(l.qrUrl),s()}})})}const[i]=await Promise.all([h({connector:t,chainId:o}),r()]);return i}async connectConnector(n,e){const t=this.getConnectorById(n),o=e??this.getDefaultConnectorChainId(t);return await h({connector:t,chainId:o})}}const f="eip155";function W({projectId:c}){return p({rpc:n=>({http:`https://rpc.walletconnect.com/v1/?chainId=${f}:${n.id}&projectId=${c}`})})}function B({appName:c,chains:n}){return[new m({chains:n,options:{qrcode:!1}}),new w({chains:n,options:{shimDisconnect:!0}}),new g({chains:n,options:{appName:c,headlessMode:!0}})]}export{A as EthereumClient,B as modalConnectors,W as walletConnectProvider};
//# sourceMappingURL=index.js.map
