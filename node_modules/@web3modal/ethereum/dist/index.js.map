{"version":3,"file":"index.js","sources":["../src/client.ts","../src/utils.ts"],"sourcesContent":["import type { Chain, Client, Connector } from '@wagmi/core'\nimport { connect, disconnect, getAccount, watchAccount } from '@wagmi/core'\nimport type { ConnectorId } from './types'\n\nexport class EthereumClient {\n  private readonly wagmi = {} as Client\n  public readonly chains = [] as Chain[]\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public constructor(wagmi: any, chains: Chain[]) {\n    const walletConnect = wagmi.connectors.find((c: Connector) => c.id === 'walletConnect')\n    if (!walletConnect) {\n      throw new Error('WalletConnectConnector is required')\n    }\n    this.wagmi = wagmi\n    this.chains = chains\n  }\n\n  // -- private\n  private getDefaultConnectorChainId(connector: Connector) {\n    return connector.chains[0].id\n  }\n\n  // -- public web3modal\n  public getConnectorById(id: ConnectorId | string) {\n    const connector = this.wagmi.connectors.find(item => item.id === id)\n    if (!connector) {\n      throw new Error(`Connector for id ${id} was not found`)\n    }\n\n    return connector\n  }\n\n  public async getActiveWalletConnectUri() {\n    const connector = this.getConnectorById('walletConnect')\n    const provider = await connector.getProvider()\n\n    return provider.connector.uri\n  }\n\n  public getConnectorWallets() {\n    const connectors = this.wagmi.connectors.filter(connector => connector.id !== 'walletConnect')\n\n    return connectors\n  }\n\n  public async connectWalletConnect(onUri: (uri: string) => void, selectedChainId?: number) {\n    const connector = this.getConnectorById('walletConnect')\n    const chainId = selectedChainId ?? this.getDefaultConnectorChainId(connector)\n\n    async function getProviderUri() {\n      return new Promise<void>(resolve => {\n        connector.once('message', async ({ type }) => {\n          if (type === 'connecting') {\n            const provider = await connector.getProvider()\n            onUri(provider.connector.uri)\n            resolve()\n          }\n        })\n      })\n    }\n\n    const [data] = await Promise.all([connect({ connector, chainId }), getProviderUri()])\n\n    return data\n  }\n\n  public async connectCoinbaseMobile(onUri?: (uri: string) => void, selectedChainId?: number) {\n    const connector = this.getConnectorById('coinbaseWallet')\n    const chainId = selectedChainId ?? this.getDefaultConnectorChainId(connector)\n\n    async function getProviderUri() {\n      return new Promise<void>(resolve => {\n        connector.once('message', async ({ type }) => {\n          if (type === 'connecting') {\n            const provider = await connector.getProvider()\n            onUri?.(provider.qrUrl)\n            resolve()\n          }\n        })\n      })\n    }\n\n    const [data] = await Promise.all([connect({ connector, chainId }), getProviderUri()])\n\n    return data\n  }\n\n  public async connectConnector(connectorId: ConnectorId | string, selectedChainId?: number) {\n    const connector = this.getConnectorById(connectorId)\n    const chainId = selectedChainId ?? this.getDefaultConnectorChainId(connector)\n    const data = await connect({ connector, chainId })\n\n    return data\n  }\n\n  public disconnect = disconnect\n\n  public getAccount = getAccount\n\n  public watchAccount = watchAccount\n}\n","import { InjectedConnector } from '@wagmi/core'\nimport { CoinbaseWalletConnector } from '@wagmi/core/connectors/coinbaseWallet'\nimport { WalletConnectConnector } from '@wagmi/core/connectors/walletConnect'\nimport { jsonRpcProvider } from '@wagmi/core/providers/jsonRpc'\nimport type { ModalConnectorsOpts, WalletConnectProviderOpts } from './types'\n\n// -- constants ------------------------------------------------------- //\nexport const NAMESPACE = 'eip155'\n\n// -- providers ------------------------------------------------------- //\nexport function walletConnectProvider({ projectId }: WalletConnectProviderOpts) {\n  return jsonRpcProvider({\n    rpc: chain => ({\n      http: `https://rpc.walletconnect.com/v1/?chainId=${NAMESPACE}:${chain.id}&projectId=${projectId}`\n    })\n  })\n}\n\n// -- connectors ------------------------------------------------------ //\nexport function modalConnectors({ appName, chains }: ModalConnectorsOpts) {\n  return [\n    new WalletConnectConnector({ chains, options: { qrcode: false } }),\n    new InjectedConnector({ chains, options: { shimDisconnect: true } }),\n    new CoinbaseWalletConnector({ chains, options: { appName, headlessMode: true } })\n  ]\n}\n"],"names":["EthereumClient","wagmi","chains","disconnect","getAccount","watchAccount","c","connector","id","item","onUri","selectedChainId","chainId","getProviderUri","resolve","type","provider","data","connect","connectorId","NAMESPACE","walletConnectProvider","projectId","jsonRpcProvider","chain","modalConnectors","appName","WalletConnectConnector","InjectedConnector","CoinbaseWalletConnector"],"mappings":"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"}